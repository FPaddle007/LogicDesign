// Cash Register
module CashReg
  #(parameter W = 5)									// Default bit width
  (Clock, C, A, T, X, Total);
	input Clock;
	input A;													// Add next X
	input T;													// Display Total
	input C;													// Clear Total
	input [W-1:0] X;										// Unsigned
	output [W-1:0] Total;
  
  
// Datapath Components
	reg [W-1:0] AREG;
	wire A_LD;

	reg [W-1:0] SREG;
	wire S_CLR, S_LD;

	reg [W-1:0] TREG;
	wire T_CLR, T_LD;
  
	wire ovf;
	wire [W-1:0] R;
	AddW #(.W(W)) Adder(SREG, AREG, 1'b0, R, ovf);


// Datapath Controller
	reg [2:0] Q, Q_Next;
	localparam Init          = 3'd0;
	localparam LoadX         = 3'd1;
	localparam AddX          = 3'd2;
	localparam MoreX         = 3'd3;
	localparam LoadTotal     = 3'd4;
	localparam DisplayTotal  = 3'd5;
	localparam Clear         = 3'd6;


 // Controller State Transitions
	always @*
	begin
		case (Q)
			Init:
        if (A)
					Q_Next <= LoadX;
				else
					Q_Next <= Init;

			LoadX: Q_Next <= AddX;

			AddX: Q_Next <= MoreX;

			MoreX:
        if (A)
					Q_Next <= LoadX;
				else if (T)
					Q_Next <= LoadTotal;
				else
					Q_Next <= MoreX;

			LoadTotal: Q_Next <= DisplayTotal;

			DisplayTotal:
        if (C)
					Q_Next <= Clear;
				else
					Q_Next <= DisplayTotal;

			Clear: Q_Next <= Init;
		endcase
	end
  
 // Initial State
  initial
	begin
		Q <= Init;
		AREG <= 'd0;
		SREG <= 'd0;
		TREG <= 'd0;
	end


// Controller State Update
	always @(posedge Clock)
		Q <= Q_Next;

// Controller Output Logic
	assign A_LD = (Q == LoadX);
	assign S_LD = (Q == AddX);
	assign T_LD = (Q == LoadTotal);
	assign S_CLR = (Q == Clear);
	assign T_CLR = (Q == Clear);

 
// Datapath State Update
  always @(posedge Clock)
	begin
		AREG <= A_LD ? X : 'd0;
		SREG <=
			S_CLR ? 'd0 :
				(S_LD ? R : SREG);
		TREG <=
			T_CLR ? 'd0 :
				(T_LD ? SREG : TREG);
	end

// Datapath Output Logic
	assign Total = TREG;

endmodule

module FullAdder(a, b, cin, s, cout);
	input a, b, cin;
	output s, cout;
	assign s = a ^ b ^ cin;
	assign cout = a & b | cin & (a ^ b);
endmodule

// W-bit Ripple-Carry Adder
// ModelSim allows the use of "generate".
// This module defines a parameterized W-bit RCA adder
module AddW
	#(parameter W = 16)			// Default width
	(A, B, c0, S, ovf);
	input [W-1:0] A, B;			// W-bit unsigned inputs
	input c0;						// Carry-in
	output [W-1:0] S;				// W-bit unsigned output
	output ovf;						// Overflow signal

	wire [W:0] c;					// Carry signals
	assign c[0] = c0;

	FullAdder F0(A[0], B[0]^Co, c[0], S[0], c[1]);

	FullAdder F1(A[1], B[1]^Co, c[1], S[1], c[2]);

	FullAdder F2(A[2], B[2]^Co, c[2], S[2], c[3]);

	FullAdder F3(A[3], B[3]^Co, c[3], S[3], c[4]);

	assign Ovf = c[4]^c[3];
endmodule



// Clocking
// Clock Divider by Powers of 2 (Table of frequencies and periods at EOF)
module Clock_Div
	#(parameter SIZE = 36)	// divides by 2^i for i = 0 to i = 36
	(CLK_in, CLKS_out);
	input CLK_in;
	output [SIZE:0] CLKS_out;
	
	reg [SIZE:1] Counter;
	initial Counter = 'd0;
	
	always @(posedge CLK_in)
		Counter <= Counter + 1;

	assign CLKS_out = {Counter, CLK_in};
endmodule

// W-Bit unsigned binary number to 4-Digit 7-Segment Display
module Unsigned_to_7SEG
	#(parameter W = 4)					// Default bit width
	(input [W-1:0] N,						// W-bit unsigned number			
	 output [6:0] D3, D2, D1, D0,		// 7SEG display for the four digits
	 output TooLarge						// N too large to display
	);

// Named HEX Outputs
	localparam ZERO 	= 7'b1000000;	// 64
	localparam ONE		= 7'b1111001; 	// 121
	localparam TWO		= 7'b0100100; 	// 36
	localparam THREE	= 7'b0110000; 	// 48
	localparam FOUR	= 7'b0011001; 	// 25
	localparam FIVE	= 7'b0010010; 	// 18
	localparam SIX		= 7'b0000010; 	// 2
	localparam SEVEN	= 7'b1111000; 	// 120
	localparam EIGHT	= 7'b0000000; 	// 0
	localparam NINE	= 7'b0010000; 	// 16
	localparam MINUS	= 7'b0111111;	// 63
	localparam OFF		= 7'b1111111; 	// 127

// Load the look-up table
	reg [6:0] LUT[0:9];					// Magnitude Look-up Table
	initial begin
		LUT[0] = ZERO;
		LUT[1] = ONE;
		LUT[2] = TWO;
		LUT[3] = THREE;
		LUT[4] = FOUR;
		LUT[5] = FIVE;
		LUT[6] = SIX;
		LUT[7] = SEVEN;
		LUT[8] = EIGHT;
		LUT[9] = NINE;
	end


// Check if N can be displayed
	assign TooLarge = (N > 'd9999);


// Get digits of N
	wire [W-1:0] Quotient0, Quotient1, Quotient2, Digit0, Digit1, Digit2, Digit3;
	assign Quotient0 = N / 4'b1010;
	assign Quotient1 = Quotient0 / 4'b1010;
	assign Quotient2 = Quotient1 / 4'b1010;
	assign Digit0 = N % 4'b1010;
	assign Digit1 = Quotient0 % 4'b1010;
	assign Digit2 = Quotient1 % 4'b1010;
	assign Digit3 = Quotient2 % 4'b1010;
	
// Display: indicate out-of-range with "dashes"
	assign D3 = TooLarge? MINUS : ((Digit3 == 'd0) ? OFF : LUT[Digit3]);
	assign D2 = TooLarge? MINUS : ((Digit3 == 'd0) & (Digit2 == 'd0) ? OFF : LUT[Digit2]);
	assign D1 = TooLarge? MINUS : ((Digit3 == 'd0) & (Digit2 == 'd0) & (Digit1 == 'd0) ? OFF : LUT[Digit1]);
	assign D0 = TooLarge? MINUS : LUT[Digit0];
endmodule

module CashRegister(LEDR,SW,KEY,CLOCK_50,HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,HEX6,HEX7);
	parameter W=4;
	input [3:0] SW;
	input [2:0] KEY;
	input CLOCK_50;
	output [6:0] HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,HEX6,HEX7;
	output [5:0] LEDR;
	
	wire[3:0] Total;
	wire [36:0] clock;
	wire ToLarge1;
	wire ToLarge2;
	
	Clock_Div CD(CLOCK_50,clock);
	//CashReg #(.W(W)) CR(.Clock(clock[25]), .C(~KEY[2]), .T(~KEY[1]), .A(~KEY[0]), .X(SW[3:0]), .Total(Total[3:0]));
	CashReg #(.W(W)) CR(clock[22], ~KEY[2], ~KEY[0], ~KEY[1], SW[3:0], Total);
	
	Unsigned_to_7SEG #(.W(W)) U7S1(SW[3:0],HEX7,HEX6,HEX5,HEX4,ToLarge1);
	Unsigned_to_7SEG #(.W(W)) U7S2(Total,HEX3,HEX2,HEX1,HEX0,ToLarge2);

endmodule

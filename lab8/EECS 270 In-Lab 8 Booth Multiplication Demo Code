module Lab8(SW,KEY,HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,HEX6,HEX7,LEDG,CLOCK_50);
input [17:0] SW;
input [3:0] KEY;
input CLOCK_50;
output [6:0] HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,HEX6,HEX7;
output [8:0] LEDG;
wire [36:0] clock;
wire [10:0] total;
Clock_Div CD(CLOCK_50,clock);


FourFuncCalc Calc(clock[22],SW[17]&~KEY[0],SW[17]&~KEY[3],~SW[17]&~KEY[3],~SW[17]&~KEY[2],~SW[17]&~KEY[1],~SW[17]&~KEY[0],SW[10:0],total,LEDG[0]);
Binary_to_7SEG Result1(total,1,HEX3,HEX2,HEX1,HEX0);
Binary_to_7SEG Number1(SW[10:0],0,HEX7,HEX6,HEX5,HEX4);

endmodule



// W-Bit binary number to 4-Digit 7-Segment Display
// Binary to 7SEG
module Binary_to_7SEG
	#(parameter W = 11)				// Default bit width
	(input [W-1:0] N,					// W-bit "signed" number			
	 input Encoding,					// Signed-Magnitude: 0, Two's Complement: 1
	 output [6:0] Sign,				// 7SEG display for sign
	 output [6:0] D2, D1, D0,		// 7SEG display for the three digits
	 output TooLarge					// N too large to display
	);

// Named HEX Outputs
	localparam ZERO 	= 7'b1000000;	// 64
	localparam ONE		= 7'b1111001; 	// 121
	localparam TWO		= 7'b0100100; 	// 36
	localparam THREE	= 7'b0110000; 	// 48
	localparam FOUR	= 7'b0011001; 	// 25
	localparam FIVE	= 7'b0010010; 	// 18
	localparam SIX		= 7'b0000010; 	// 2
	localparam SEVEN	= 7'b1111000; 	// 120
	localparam EIGHT	= 7'b0000000; 	// 0
	localparam NINE	= 7'b0010000; 	// 16
	localparam MINUS	= 7'b0111111;	// 63
	localparam OFF		= 7'b1111111; 	// 127

// Load the look-up table
	reg [6:0] LUT[0:9];					// Magnitude Look-up Table
	initial begin
		LUT[0] = ZERO;
		LUT[1] = ONE;
		LUT[2] = TWO;
		LUT[3] = THREE;
		LUT[4] = FOUR;
		LUT[5] = FIVE;
		LUT[6] = SIX;
		LUT[7] = SEVEN;
		LUT[8] = EIGHT;
		LUT[9] = NINE;
	end

	
// Find Magnitude
	wire [W-1:0] Magnitude;
	assign Magnitude = Encoding? (N[W-1] ? -N : N) : N[W-2:0];

// Check if N can be displayed
	assign TooLarge = (Magnitude > 'd999);


// Get digits of N
	wire [W-1:0] Quotient0, Quotient1, Digit0, Digit1, Digit2;
	assign Quotient0 = Magnitude / 4'b1010;
	assign Quotient1 = Quotient0 / 4'b1010;
	assign Digit0 = Magnitude % 4'b1010;
	assign Digit1 = Quotient0 % 4'b1010;
	assign Digit2 = Quotient1 % 4'b1010;
	
// Display: indicate out-of-range with "dashes"
		assign Sign = TooLarge? MINUS : (N[W-1]? MINUS : OFF);	// - if negative, blank if positive
		assign D2 = TooLarge? MINUS : ((Digit2 == 'd0) ? OFF : LUT[Digit2]);
		assign D1 = TooLarge? MINUS : ((Digit2 == 'd0) & (Digit1 == 'd0) ? OFF : LUT[Digit1]);
		assign D0	= TooLarge? MINUS : LUT[Digit0];
endmodule


// ModelSim allows the use of "generate".
// This module defines a parameterized W-bit RCA adder/dubtsctor
// BoothMul
module AddSub
	#(parameter W = 16)			// Default width
	(A, B, c0, S, ovf);
	input [W-1:0] A, B;			// W-bit unsigned inputs
	input c0;								// Carry-in
	output [W-1:0] S;				// W-bit unsigned output
	output ovf;							// Overflow signal

	wire [W:0] c;						// Carry signals
	assign c[0] = c0;
	
	FullAdder F0(A[0], B[0]^c0, c[0], S[0], c[1]);

	FullAdder F1(A[1], B[1]^c0, c[1], S[1], c[2]);

	FullAdder F2(A[2], B[2]^c0, c[2], S[2], c[3]);

	FullAdder F3(A[3], B[3]^c0, c[3], S[3], c[4]);
	
	FullAdder F4(A[4], B[4]^c0, c[4], S[4], c[5]);

	FullAdder F5(A[5], B[5]^c0, c[5], S[5], c[6]);

	FullAdder F6(A[6], B[6]^c0, c[6], S[6], c[7]);

	FullAdder F7(A[7], B[7]^c0, c[7], S[7], c[8]);
	
	FullAdder F8(A[8], B[8]^c0, c[8], S[8], c[9]);

	FullAdder F9(A[9], B[9]^c0, c[9], S[9], c[10]);

	FullAdder F10(A[10], B[10]^c0, c[10], S[10], c[11]);

	assign ovf = c[11]^c[10];
endmodule


// W-bit Booth Multiplier
module BoothMul
	#(parameter W = 16)								// Default bit width
	(Clock, Reset, Start, M, Q, P);
	localparam WW = 2 * W;						// Double bit width
	localparam BoothIter = $clog2(W);	// Width of Booth counter
	input Clock;
	input Reset;											// To initial state
	input Start;											// Start new multiplication
	input signed [W-1:0] Q;						// Multiplicand
	input signed [W-1:0] M;						// Multiplier
	output signed [WW-1:0] P;					// Product

// Datapath Components
	reg signed [WW+1:0] PM;						// Product/Multiplier double register
	wire M_LD;												// Load multiplier
	wire P_LD;												// Load product
	wire PM_ASR;											// Arithmetic Shift Right of PM

	reg [BoothIter-1:0] CTR;					// Iteration counter
	wire CTR_DN;											// Count down

	wire c0;
	wire ovf;
	wire signed [W-1:0] R;
	AddSub #(.W(W)) AddSub1(PM[WW:W+1], Q, c0, R, ovf);
	wire PSgn = R[W-1] ^ ovf;					// Corrected P Sign on Adder/Subtractor overflow

// Datapath Controller
	reg [3:0] State, State_Next;
	localparam Init		= 3'd0;
	localparam Load		= 3'd1;
	localparam Check	= 3'd2;
	localparam Add		= 3'd3;
	localparam Sub		= 3'd4;
	localparam Next		= 3'd5;
	localparam More		= 3'd6;
	localparam Done		= 3'd7;
	localparam Multiply = 8;

 // Controller State Transitions
	always @*
	begin
		case(State)
			Init:
				if (Start)
					State_Next <= Load;
				else
					State_Next <= Init;

			Load:	State_Next <= Check;
			
			Check:
				if (~PM[1] & PM[0])
						State_Next <= Add;
				else if (PM[1] & ~PM[0])
						State_Next <= Sub;
				else
						State_Next <= Next;

			Add: State_Next <= Next;

			Sub: State_Next <= Next;
			
			Multiply: State_Next <= Next;

			Next: State_Next <= More;

			More:
				if (CTR == 'd0)
						State_Next <= Done;
				else
						State_Next <= Check;

			Done: State_Next <= Init;
		endcase
	end

 // Initial State
	initial
	begin
		State <= Init;
		PM <= 'd0;
		CTR <= W;
	end

// Controller State Update
	always @(posedge Clock)
		if (Reset)
			State <= Init;
		else
			State <= State_Next;

// Controller Output Logic
	assign M_LD			= (State == Load);
	assign P_LD			= (State == Add) | (State == Sub);
	assign PM_ASR 	= (State == Next);
	assign CTR_DN 	= (State == Next);
	assign c0 			= (State == Sub);
	assign AllDone	= (State == Done);
	
// Datapath State Update
	wire signed [W:0] ZERO; 					// (W+1)-bit 0 since `(W+1)'d0 does not work
	assign ZERO = 'd0;
	always @(posedge Clock)
		if (Reset)
			begin
				PM[WW+1:W+1] <= 'd0;
				PM[0] <= 0;
				CTR <= W;
			end
		else
			begin
				PM <=
					(M_LD? $signed({ZERO, M, 1'b0}) :				// Load M
						(P_LD ? $signed({PSgn, R, PM[W:0]}) :	// Add/Sub
							(PM_ASR ? PM >>> 1 :								// ASR
							 PM																	// Unchanged
							)        
						)
					);
				CTR <= CTR_DN ? CTR - 1 : CTR;
			end

// Datapath Output Logic
	assign P = AllDone? PM[WW:1] : 'd0;
endmodule

// BoothMul TestBench
module BoothMulTestBench();
	parameter W = 8;							// Data bit width
	localparam WW = 2 * W;

	reg Clock;
	always #5 Clock = ~Clock;

	reg Reset;
	reg Start;

	reg signed [W-1:0] Q, M;
	wire signed [WW-1:0] P;

	BoothMul #(.W(W)) BM(Clock, Reset, Start, M, Q, P);

	initial begin
		Clock = 0; Reset = 1;
		#10;
		Reset = 0;
		M = 'd7; Q = -'d8;
		Start = 1;
		#10;
		Start = 0;
		#(4 * W * 10);
		M = 'd7; Q = -'d6;
		Start = 1;
		#10;
		Start = 0;
		#(4 * W * 10);
		M = 'd13; Q = -'d10;
		Start = 1;
		#10;
		Start = 0;
		#(4 * W * 10);
		M = 'd15; Q = 'd15;
		Start = 1;
		#10;
		Start = 0;
		#(4 * W * 10);
	end
endmodule

// Clocking
// Clock Divider by Powers of 2 (Table of frequencies and periods at EOF)
module Clock_Div
	#(parameter SIZE = 36)	// divides by 2^i for i = 0 to i = 36
	(CLK_in, CLKS_out);
	input CLK_in;
	output [SIZE:0] CLKS_out;
	
	reg [SIZE:1] Counter;
	initial Counter = 'd0;
	
	always @(posedge CLK_in)
		Counter <= Counter + 1;

	assign CLKS_out = {Counter, CLK_in};
endmodule

// Lab 7:Four-Function Calculator Template
module FourFuncCalc
	#(parameter W = 11)			// Default bit width
	(Clock, Clear, Equals, Add, Subtract, Multiply, Divide, Number, Result, Overflow,State);
	localparam WW = 2 * W;		// Double width for Booth multiplier
	//localparam BoothIter = $clog2(W);	// Width of Booth Counter
	input Clock;
	input Clear;				// C button
	input Equals;				// = button: displays result so far; does not repeat previous operation
	input Add;					// + button
	input Subtract;				// - button
	input Multiply;				// x button (multiply)
	input Divide;				// / button (division quotient)
	input [W-1:0] Number; 			// Must be entered in sign-magnitude on SW[W-1:0]
	output signed [W-1:0] Result;		// Calculation result in two's complement
	output Overflow;				// Indicates result can't be represented in W bits
	output [4:0] State;

  
//****************************************************************************************************
// Datapath Components
//****************************************************************************************************


//----------------------------------------------------------------------------------------------------
// Registers
// For each register, declare it along with the controller commands that
// are used to update its state following the example for register A
//----------------------------------------------------------------------------------------------------
	
	reg signed [W-1:0] A;			// Accumulator
	wire CLR_A, LD_A;			// CLR_A: A <= 0; LD_A: A <= Q
	reg signed [W-1:0] N_TC;
	wire CLR_N_TC, LD_N_TC;

  
//----------------------------------------------------------------------------------------------------
// Number Converters
// Instantiate the three number converters following the example of SM2TC1
//----------------------------------------------------------------------------------------------------

	wire signed [W-1:0] NumberTC;	// Two's complement of Number
	SM2TC #(.width(W)) SM2TC1(Number, NumberTC);

	
//----------------------------------------------------------------------------------------------------
// Adder/Subtractor 
//----------------------------------------------------------------------------------------------------
	wire signed [W-1:0] Y1;
	wire signed [W-1:0] Y2;
	wire c0;					// 0: Add, 1: Subtract
	wire ovf;				// Overflow
	wire [W-1:0] R;
	AddSub #(.W(W)) AddSub1(Y1, Y2, c0, R, ovf);
	wire PSgn = R[W-1] ^ ovf;		// Corrected P Sign on Adder/Subtractor overflow
//----------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------
// Multiplier
//----------------------------------------------------------------------------------------------------					
	localparam BoothIter = $clog2(W);	// Width of Booth counter
	wire signed [W-1:0] M;						// Multiplier
	wire signed [WW:W+1] P;					// Product

	
	// Datapath Components
	reg signed [WW:0] PM;						// Product/Multiplier double register
	wire M_LD;												// Load multiplier
	wire P_LD;												// Load product
	wire PM_ASR;											// Arithmetic Shift Right of PM

	reg [BoothIter-1:0] CTR;					// Iteration counter
	wire CTR_DN;											// Count down
	
//----------------------------------------------------------------------------------------------------
// MUXes
// Use conditional assignments to create the various MUXes
// following the example for MUX Y1
//----------------------------------------------------------------------------------------------------
	///////////////////////////////////////////////NOT ADDER//////////////////////////////////////
	
	//wire SEL_D;
	wire signed [W-1:0] Y3;
	assign Y3 = A;				//SEL_D ? D[W-1:0]:A
	
	wire SEL_P;									
	assign Y1 = SEL_P ? PM[WW:W+1] : Y3;	// 1: Y1 = P; 0: Y1 = Y3

	assign Y2 = N_TC;		// SEL_D ? N_SM : N_TC
	
	wire SEL_M;
	wire signed [W-1:0] Y4;
	assign Y4 = SEL_M ? PM[W:1] : R;
	
	wire SEL_Q;
	wire signed [W-1:0] Y5;
	assign Y5 = Y4;		// SEL_Q ? Q_TC : Y4;
	
	wire SEL_N;
	wire signed [W-1:0] Y6;
	assign Y6 = SEL_N ? Y2 : Y5;
	

//****************************************************************************************************
/* Datapath Controller
   Suggested Naming Convention for Controller States:
     All names start with X (since the tradtional Q connotes quotient in this project)
     XAdd, XSub, XMul, and XDiv label the start of these operations
     XA: Prefix for addition states (that follow XAdd)
     XS: Prefix for subtraction states (that follow XSub)
     XM: Prefix for multiplication states (that follow XMul)
     XD: Prefix for division states (that follow XDiv)
*/
//****************************************************************************************************


//----------------------------------------------------------------------------------------------------
// Controller State and State Labels
// Replace ? with the size of the state registers X and X_Next after
// you know how many controller states are needed.
// Use localparam declarations to assign labels to numeric states.
// Here are a few "common" states to get you started.
//----------------------------------------------------------------------------------------------------

	reg [7:0] X, X_Next;

	// Addition only
	localparam XInit = 'd0;	// Power-on state (A == 0)
	localparam XLoadNTC1 = 'd1;		// Pick numeric assignments
	localparam XLoadA1	= 'd2;
	localparam XResult = 'd3;
	localparam XNextNumAdd = 'd4;
	localparam XLoadNTC2 = 'd5;
	localparam XLoadA2 = 'd6;
	localparam XOvf = 'd7;
	localparam XClear	= 'd8;
	localparam XNextNumSub = 'd9;
	localparam XLoadNTC3 = 'd10;
	localparam XLoadA3 = 'd11;
	localparam XNextNumMult = 'd12;
	localparam XLoadNTC4= 'd13;
	localparam XCheck = 'd14;
	localparam XAdd = 'd15;
	localparam XSub = 'd16;
	localparam XMore = 'd17;
	localparam XDone = 'd18;
	localparam XNext = 'd19;


//----------------------------------------------------------------------------------------------------
// Controller State Transitions
// This is the part of the project that you need to figure out.
// It's best to use ModelSim to simulate and debug the design as it evolves.
// Check the hints in the lab write-up about good practices for using
// ModelSim to make this "chore" manageable.
// The transitions from XInit are given to get you started.
//----------------------------------------------------------------------------------------------------
	always @*
	case (X)
		XInit:if(Clear)
					X_Next <= XInit;
				else if (Equals)
					X_Next <= XLoadNTC1;
				else if (Add)
					X_Next <= XNextNumAdd;
				else if (Subtract)
					X_Next <= XNextNumSub;
				else if (Multiply)
					X_Next <= XNextNumMult;
				else
					X_Next <= XInit;
					
		XLoadNTC1:begin X_Next<=XLoadA1; end
		XLoadA1: begin X_Next<=XResult; end
		XResult:if(Clear)
						X_Next<=XClear;
					else if(Add)
						X_Next<=XNextNumAdd;
					else if(Subtract)
						X_Next<=XNextNumSub;
					else if(Multiply)
						X_Next<=XNextNumMult;
					else
						X_Next<=XResult;
		XNextNumAdd:if(Clear)
							X_Next<=XInit;
						else if(Equals)
							X_Next<=XLoadNTC2;
						else
							X_Next<=XNextNumAdd;
		XLoadNTC2:begin X_Next<=XLoadA2; end
		XLoadA2:if(~ovf)
						X_Next<=XResult;
						else
						X_Next<=XOvf;
		XOvf:if(Clear)
					X_Next<=XInit;
				else
					X_Next<=XOvf;
		XClear:begin X_Next<=XInit; end
		XNextNumSub:if(Clear)
							X_Next<=XInit;
						else if(Equals)
							X_Next<=XLoadNTC3;
						else
							X_Next<=XNextNumSub;
		XLoadNTC3:begin X_Next<=XLoadA3;end
		XLoadA3:if(~ovf)
						X_Next<=XResult;
					else
						X_Next<=XOvf;
		XNextNumMult:if(Clear)
							X_Next<=XInit;
						 else if(Equals)
							X_Next<=XLoadNTC4;
					    else
							X_Next<=XNextNumMult;
		XLoadNTC4:begin X_Next<=XCheck; end
		XCheck:if (~PM[1] & PM[0])
					X_Next<=XAdd;
				 else if(PM[1] & ~PM[0])
					X_Next<=XSub;
				 else
					X_Next<=XNext;
		XMore:if(CTR=='d0)
					X_Next<=XDone;
				else 
					X_Next<=XCheck;
		XDone:begin
		if(PM[W]^PM[W+1])
			X_Next <= XOvf; // go to overflow
		else
			X_Next <= XResult;end // display result
		XNext:begin X_Next<=XMore;end
		XAdd:begin X_Next<=XNext;end
		XSub:begin X_Next<=XNext;end
	endcase
  
  
//----------------------------------------------------------------------------------------------------
// Initial state on power-on
// Here's a freebie!
//----------------------------------------------------------------------------------------------------

	initial begin
		X <= XClear;
		A <= 'd0;
		N_TC <= 'd0;
		PM <= 'd0;
		CTR <= W;
		
		////////////////////////////////////////////////////NOT ADDER///////////////////////
		/*
		N_SM <= 'd0;
		MCounter <= W;		//BoothIter'dW;
		PM <= 'd0;      			//WW+1'd0;
		*/
	end


//----------------------------------------------------------------------------------------------------
// Controller Commands to Datapath
// No freebies here!
// Using assign statements, you need to figure when the various controller
// commands are asserted in order to properly implement the datapath
// operations.
//----------------------------------------------------------------------------------------------------
assign c0 = (X==XNextNumSub) | (X==XLoadNTC3) | (X==XLoadA3) | (X==XSub);
assign CLR_N_TC = (X==XClear);
assign CLR_A = (X==XClear);
assign LD_N_TC = (X==XLoadNTC1) | (X==XLoadNTC2) | (X==XLoadNTC3) | (X==XLoadNTC4);
assign LD_A = (X==XLoadA1) | (X==XLoadA2) | (X==XLoadA3) | (X==XDone);
assign SEL_D=0;
assign SEL_P=(X==XLoadNTC4) | (X==XNextNumMult) | (X==XCheck) | (X==XDone) | (X==XNext) | (X==XAdd) | (X==XSub);
assign SEL_M=(X==XLoadNTC4) | (X==XNextNumMult) | (X==XCheck) | (X==XDone) | (X==XNext) | (X==XAdd) | (X==XSub);
assign SEL_Q=0;
assign SEL_N=0;
assign M_LD	= (X == XLoadNTC4);
assign P_LD	= (X == XAdd) | (X == XSub);
assign PM_ASR 	= (X == XNext);
assign CTR_DN 	= (X == XNext);
assign AllDone	= (X == XDone);

//----------------------------------------------------------------------------------------------------  
// Controller State Update
//----------------------------------------------------------------------------------------------------

	always @(posedge Clock)
		if (Clear)
			X <= XClear;
		else
			X <= X_Next;

      
//----------------------------------------------------------------------------------------------------
// Datapath State Update
// This part too is your responsibility to figure out.
// But there is a hint to get you started.
//----------------------------------------------------------------------------------------------------
	wire signed [W:0] ZERO; 					// (W+1)-bit 0 since `(W+1)'d0 does not work
	assign ZERO = 'd0;
	always @(posedge Clock)
	begin
		N_TC <= LD_N_TC ? NumberTC : N_TC;
		A <= CLR_A ? 0 : (LD_A ? Y6 : A);
			if (Clear)
				begin
					PM[WW:W+1] <= 'd0;			// CHANGED THIS ONE SINCE MODELSIM
					PM[0] <= 0;
					CTR <= W;
				end
			else
				begin
					PM <=
						(M_LD? $signed({ZERO, A, 1'b0}) :				// Load A
							(P_LD ? $signed({PSgn, R, PM[W:0]}) :	// Add/Sub
								(PM_ASR ? PM >>> 1 :								// ASR
								 PM																	// Unchanged
								)        
							)
						);
					CTR <= M_LD ? W : (CTR_DN ? CTR - 1 : CTR);
				end
	end

 
//---------------------------------------------------------------------------------------------------- 
// Calculator Outputs
// The two outputs are Result and Overflow, get it?
//----------------------------------------------------------------------------------------------------
	assign P = AllDone? PM[WW:1] : 'd0;
	assign Result = A;
	assign Overflow = (X==XOvf);
	assign State = X;
endmodule

// Full Adder
module FullAdder(a, b, cin, s, cout);
	input a, b, cin;
	output s, cout;

	assign s = a ^ b ^ cin;
	assign cout = a & b | cin & (a ^ b);
endmodule

// Conversion between signed-magnitude and two's complement
// SM2TC_Conversions
module SM2TC
	#(parameter width = 11)
	(SM, TC);
	input [width-1:0] SM;
	output [width-1:0] TC;

	wire [width-2:0] tmp;                 // Magnitude
	assign tmp = ~(SM[width-2:0]) + 'b1;  // Flip bits and add 1
 	assign TC = SM[width-1] ?             // Negative
                (tmp == 0 ?             // Negative zero
                  'd0 :                 // Convert to "positive" zero          
                  {1'b1, tmp}):         // Prepend negative sign
                SM;                     // Positive
endmodule

module TC2SM
	#(parameter width = 11)
	(TC, SM, Overflow);
	input [width-1:0] TC;
	output [width-1:0] SM;
  output Overflow;

	wire [width-1:0] Magnitude;
	assign Magnitude = TC[width-1] ?                // Negative
                       ~(TC[width-1:0]) + 1'b1 :  // Flip bits and add 1
                       TC;                        // Positive
	assign SM = {TC[width-1], Magnitude[width-2:0]};// Prepend sign
  assign Overflow = TC[width-1] & ~TC[width-2:0]; // Most negative TC numbe
                                                  // Alternatively, Overflow = Magnitude[width-1]
endmodule
